"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[243],{3739:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"performance","title":"Performance","description":"Optimizing Performance","source":"@site/docs/performance.md","sourceDirName":".","slug":"/performance","permalink":"/react-native-swipeable-card-stack/performance","draft":false,"unlisted":false,"editUrl":"https://github.com/antoine-cottineau/react-native-swipeable-card-stack/docs/performance.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Performance"},"sidebar":"defaultSidebar","previous":{"title":"API","permalink":"/react-native-swipeable-card-stack/api"}}');var i=t(4848),a=t(8453);const o={sidebar_position:4,title:"Performance"},s=void 0,c={},d=[{value:"Optimizing Performance",id:"optimizing-performance",level:2},{value:"Memoizing Card Components",id:"memoizing-card-components",level:3},{value:"Additional Tips",id:"additional-tips",level:3}];function p(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"optimizing-performance",children:"Optimizing Performance"}),"\n",(0,i.jsxs)(n.p,{children:["When using ",(0,i.jsx)(n.code,{children:"react-native-swipeable-card-stack"}),", there are several ways to optimize your app's performance. The most important optimization is to memoize your card component."]}),"\n",(0,i.jsx)(n.h3,{id:"memoizing-card-components",children:"Memoizing Card Components"}),"\n",(0,i.jsx)(n.p,{children:"By default, React will re-render child components whenever their parent re-renders. In the context of a card stack, this means every card could potentially re-render when a swipe occurs, even if the card's data hasn't changed."}),"\n",(0,i.jsx)(n.p,{children:"Here's how to properly memoize your card component:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { memo, useState } from 'react';\nimport { View, Text } from 'react-native';\nimport {\n  SwipeableCardStack,\n  type CardProps,\n  type SwipeDirection,\n} from 'react-native-swipeable-card-stack';\n\ntype CardItem = {\n  id: string;\n  title: string;\n};\n\nconst cards: CardItem[] = [\n  { id: '1', title: 'Swipe me!' },\n  { id: '2', title: 'Next card' },\n  { id: '3', title: 'Last one' },\n];\n\nconst Card = memo(({ item }: CardProps<CardItem>) => (\n  <View>\n    <Text>{item.title}</Text>\n  </View>\n));\n\nconst CardStack = () => {\n  const [swipes, setSwipes] = useState<SwipeDirection[]>(['right']); // First card already swiped right\n\n  return (\n    <SwipeableCardStack<CardItem>\n      data={cards}\n      swipes={swipes}\n      renderCard={Card}\n      keyExtractor={(item) => item.id}\n      onSwipeEnded={(_, direction) =>\n        setSwipes((current) => [...current, direction])\n      }\n    />\n  );\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:"By memoizing the Card component, only the cards that actually need to update (such as the currently swiped card) will re-render when a swipe occurs. This can significantly improve performance, especially when dealing with complex card layouts or large datasets."}),"\n",(0,i.jsx)(n.h3,{id:"additional-tips",children:"Additional Tips"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Keep your card components as lightweight as possible"}),"\n",(0,i.jsxs)(n.li,{children:["If your card contains expensive computations, consider using ",(0,i.jsx)(n.code,{children:"useMemo"})," for those specific values"]}),"\n",(0,i.jsx)(n.li,{children:"Ensure images in cards are properly cached and optimized"}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var r=t(6540);const i={},a=r.createContext(i);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);